"""
Django settings for myblog project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# 项目根目录
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'l)j0y_91en5=9p38txvip%d*%+r=fgav*st9sfdv7w--g+xemz'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告，请不要在生产实践中打开它，竟然我们的网站是用代码写的，必定会出现了些异常
# 那么我们bug就会直接抛给网页前端，在实践生产是不能不给用户看的，所以要关掉
DEBUG = True

# ['localhost'] 如果里面写了这个地址，外界的用户就只能通过这个网站来访问，其它页面报404
ALLOWED_HOSTS = []


# Application definition

# 如果我们创建了应用，必须要把应用写到这个表里面
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'blog2'
]

# MIDDLEWARE翻译成中文叫中间键，简点说就是django自带的工具集
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# url根配置文件，就是在myblog目录下的myblog目录里面的urls.py的那个文件
ROOT_URLCONF = 'myblog.urls'

# 字面意思是模版是一个一个的HTML文件，就是关于模版的配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# myblog后面直接调用了，把myblog当成一个模块
WSGI_APPLICATION = 'myblog.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# 数据库配置
# 如果在生产过程中要使用其它数据库的可以把上面这个链接打开（# https://docs.djangoproject.com/en/2.2/ref/settings/#databases）
# 到官方文档中找怎么配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

# 密码认证表关
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# 语言 默认是美式英语
LANGUAGE_CODE = 'zh-hans'

# 时间
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

# 静态文件的地址 (CSS, JavaScript, Images)
STATIC_URL = '/static/'
